import re
import argparse

def clean_status(raw_status):
    # –£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ escape-–∫–æ–¥—ã ANSI
    return re.sub(r'\x1b\[[0-9;]*m', '', raw_status).strip('[]')

def parse_file(filename):
    result = {}
    with open(filename, 'r', encoding='utf-8') as file:
        for line in file:
            if line.strip():
                parts = line.strip().rsplit(' ', 1)
                if len(parts) == 2:
                    url, status = parts
                    status = clean_status(status)
                    result[url.strip()] = status
    return result

def compare_files(file1, file2):
    old = parse_file(file1)
    new = parse_file(file2)

    changed = []
    new_successes = []

    for url, status in new.items():
        if url in old:
            if old[url] != status:
                changed.append((url, old[url], status))
        else:
            if status == 'SUCCESS':
                new_successes.append(url)

    return changed, new_successes

def main():
    parser = argparse.ArgumentParser(description="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ URL –º–µ–∂–¥—É –¥–≤—É–º—è —Ñ–∞–π–ª–∞–º–∏.")
    parser.add_argument('file1', help="–ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    parser.add_argument('file2', help="–í—Ç–æ—Ä–æ–π —Ñ–∞–π–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    args = parser.parse_args()

    changed, new_successes = compare_files(args.file1, args.file2)

    if changed:
        print("üîÑ –ò–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è —Å—Ç–∞—Ç—É—Å—ã:")
        for url, old, new in sorted(changed):
            print(f"  {url} –∏–∑–º–µ–Ω–∏–ª—Å—è —Å [{old}] –Ω–∞ [{new}]")
    else:
        print("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤.")

    if new_successes:
        print("\nüÜï –ù–æ–≤—ã–µ —É—Å–ø–µ—à–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã:")
        for url in sorted(new_successes):
            print(f"  {url} —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º [SUCCESS]")
    else:
        print("\nüì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö —Ç–∞—Ä–≥–µ—Ç–æ–≤.")

if __name__ == "__main__":
    main()
